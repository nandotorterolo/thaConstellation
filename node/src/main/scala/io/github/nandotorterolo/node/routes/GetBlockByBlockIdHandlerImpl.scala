package io.github.nandotorterolo.node.routes

import scala.util.Try

import cats.data.EitherT
import cats.effect.Async
import cats.implicits._
import io.github.nandotorterolo.models.BlockId
import io.github.nandotorterolo.models.ModelThrowable
import io.github.nandotorterolo.models.ModelThrowable.EntityNotFound
import io.github.nandotorterolo.models.ModelThrowable.InvalidRequestParam
import io.github.nandotorterolo.models.ModelThrowable.Message
import io.github.nandotorterolo.models.ModelThrowable.SignatureValidation
import io.github.nandotorterolo.models.ModelThrowable.Unauthorized
import io.github.nandotorterolo.node.interfaces.StorageService
import io.github.nandotorterolo.server.autogenerated.blockAuthed.BlockAuthedHandler
import io.github.nandotorterolo.server.autogenerated.blockAuthed.BlockAuthedResource
import io.github.nandotorterolo.server.autogenerated.definitions.BlockResponse
import io.github.nandotorterolo.server.autogenerated.definitions.ErrorModel
import org.http4s.Status
import scodec.bits.ByteVector

class GetBlockByBlockIdHandlerImpl[F[_]: Async, Account](storage: StorageService[F]) extends BlockAuthedHandler[F, Account] {

  override def getBlockByBlockId(
      respond: BlockAuthedResource.GetBlockByBlockIdResponse.type
  )(authContext: Either[BlockAuthedResource.AuthError, Account], blockIdStr: String): F[BlockAuthedResource.GetBlockByBlockIdResponse] = {

    (for {
      _ <- EitherT.fromEither[F](authContext).leftMap { _ => Unauthorized: ModelThrowable }

      blockId <- EitherT
        .fromEither[F](Try(BlockId(ByteVector.fromValidBase58(blockIdStr))).toEither)
        .leftMap { _ => InvalidRequestParam: ModelThrowable }

      block <- EitherT(storage.getBlock(blockId))

    } yield block).value
      .map {

        case Right(block) =>
          respond.Ok(
            BlockResponse(
              blockId = block.hash.value.toBase58,
              priorBlock = block.message.priorBlock.value.toBase58,
              sequenceNumber = block.message.sequenceNumber,
              transactions = block.message.transactions.map(_.value.toBase58).mkString(",")
            )
          )
        case Left(InvalidRequestParam) => respond.BadRequest(ErrorModel(show"$InvalidRequestParam", Status.BadRequest.code))
        case Left(EntityNotFound)      => respond.NotFound(ErrorModel(show"$EntityNotFound", Status.NotFound.code))
        case Left(Unauthorized)        => respond.Unauthorized(ErrorModel(show"$SignatureValidation", Status.Unauthorized.code))
        case Left(Message(s))          => respond.InternalServerError(ErrorModel(show"$s", Status.InternalServerError.code))
        case Left(o)                   => respond.InternalServerError(ErrorModel(show"${o.getMessage}", Status.InternalServerError.code))

      }

  }

}
